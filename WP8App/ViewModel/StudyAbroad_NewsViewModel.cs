using Microsoft.Phone.Tasks;
// ------------------------------------------------------------------------
// ========================================================================
// THIS CODE AND INFORMATION ARE GENERATED BY AUTOMATIC CODE GENERATOR
// ========================================================================
// Template:   ViewModel.tt
using System;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Windows.Input;
using WPAppStudio;
using WPAppStudio.Controls;
using WPAppStudio.Entities;
using WPAppStudio.Entities.Base;
using WPAppStudio.Localization;
using WPAppStudio.Repositories;
using WPAppStudio.Resources;
using WPAppStudio.Services;
using WPAppStudio.Services.Interfaces;
using WPAppStudio.Shared;
using WPAppStudio.ViewModel.Base;
using WPAppStudio.ViewModel.Interfaces;

namespace WPAppStudio.ViewModel
{
    /// <summary>
    /// Implementation of StudyAbroad_News ViewModel.
    /// </summary>
    [System.Runtime.CompilerServices.CompilerGenerated]
    [System.CodeDom.Compiler.GeneratedCode("Radarc", "4.0")]
    public partial class StudyAbroad_NewsViewModel : BindableBase, IStudyAbroad_NewsViewModel
    {       

		private readonly IDialogService _dialogService;
		private readonly INavigationService _navigationService;
		private readonly ILockScreenService _lockScreenService;
		private readonly IStudyAbroadDS _studyAbroadDS;
		private readonly INewsDS _newsDS;
		private readonly IWindowsPhoneDS _windowsPhoneDS;
		private readonly IWindows8DS _windows8DS;
		
        /// <summary>
        /// Initializes a new instance of the <see cref="StudyAbroad_NewsViewModel" /> class.
        /// </summary>
        /// <param name="dialogService">The Dialog Service.</param>
        /// <param name="navigationService">The Navigation Service.</param>
        /// <param name="lockScreenService">The Lock Screen Service.</param>
        /// <param name="studyAbroadDS">The Study Abroad D S.</param>
        /// <param name="newsDS">The News D S.</param>
        /// <param name="windowsPhoneDS">The Windows Phone D S.</param>
        /// <param name="windows8DS">The Windows8 D S.</param>
        public StudyAbroad_NewsViewModel(IDialogService dialogService, INavigationService navigationService, ILockScreenService lockScreenService, IStudyAbroadDS studyAbroadDS, INewsDS newsDS, IWindowsPhoneDS windowsPhoneDS, IWindows8DS windows8DS)
        {
			_dialogService = dialogService;
			_navigationService = navigationService;
			_lockScreenService = lockScreenService;
			_studyAbroadDS = studyAbroadDS;
			_newsDS = newsDS;
			_windowsPhoneDS = windowsPhoneDS;
			_windows8DS = windows8DS;
        }
		

		private ObservableCollection<RssSearchResult> _studyAbroad_NewsListControlCollection;

        /// <summary>
        /// StudyAbroad_NewsListControlCollection property.
        /// </summary>		
        public ObservableCollection<RssSearchResult> StudyAbroad_NewsListControlCollection
        {
            get
            {
                if(_studyAbroad_NewsListControlCollection == null)
					RefreshStudyAbroad_NewsListControlCollectionDelegate();
				return _studyAbroad_NewsListControlCollection;     
            }
            set
            {
                SetProperty(ref _studyAbroad_NewsListControlCollection, value);
            }
        }

		private RssSearchResult _selectedStudyAbroad_NewsListControlCollection;

        /// <summary>
        /// SelectedStudyAbroad_NewsListControlCollection property.
        /// </summary>		
        public RssSearchResult SelectedStudyAbroad_NewsListControlCollection
        {
            get
            {
				return _selectedStudyAbroad_NewsListControlCollection;
            }
            set
            {
                _selectedStudyAbroad_NewsListControlCollection = value;
                if (value != null)
                    _navigationService.NavigateTo<IStudyAbroad_DetailViewModel>(_selectedStudyAbroad_NewsListControlCollection);
            }
        }

		private ObservableCollection<RssSearchResult> _news_NewsListControlCollection;

        /// <summary>
        /// News_NewsListControlCollection property.
        /// </summary>		
        public ObservableCollection<RssSearchResult> News_NewsListControlCollection
        {
            get
            {
                if(_news_NewsListControlCollection == null)
					RefreshNews_NewsListControlCollectionDelegate();
				return _news_NewsListControlCollection;     
            }
            set
            {
                SetProperty(ref _news_NewsListControlCollection, value);
            }
        }

		private RssSearchResult _selectedNews_NewsListControlCollection;

        /// <summary>
        /// SelectedNews_NewsListControlCollection property.
        /// </summary>		
        public RssSearchResult SelectedNews_NewsListControlCollection
        {
            get
            {
				return _selectedNews_NewsListControlCollection;
            }
            set
            {
                _selectedNews_NewsListControlCollection = value;
                if (value != null)
                    _navigationService.NavigateTo<INews_DetailViewModel>(_selectedNews_NewsListControlCollection);
            }
        }

		private ObservableCollection<RssSearchResult> _windowsPhone_NewsListControlCollection;

        /// <summary>
        /// WindowsPhone_NewsListControlCollection property.
        /// </summary>		
        public ObservableCollection<RssSearchResult> WindowsPhone_NewsListControlCollection
        {
            get
            {
                if(_windowsPhone_NewsListControlCollection == null)
					RefreshWindowsPhone_NewsListControlCollectionDelegate();
				return _windowsPhone_NewsListControlCollection;     
            }
            set
            {
                SetProperty(ref _windowsPhone_NewsListControlCollection, value);
            }
        }

		private RssSearchResult _selectedWindowsPhone_NewsListControlCollection;

        /// <summary>
        /// SelectedWindowsPhone_NewsListControlCollection property.
        /// </summary>		
        public RssSearchResult SelectedWindowsPhone_NewsListControlCollection
        {
            get
            {
				return _selectedWindowsPhone_NewsListControlCollection;
            }
            set
            {
                _selectedWindowsPhone_NewsListControlCollection = value;
                if (value != null)
                    _navigationService.NavigateTo<IWindowsPhone_DetailViewModel>(_selectedWindowsPhone_NewsListControlCollection);
            }
        }

		private ObservableCollection<RssSearchResult> _windows8_NewsListControlCollection;

        /// <summary>
        /// Windows8_NewsListControlCollection property.
        /// </summary>		
        public ObservableCollection<RssSearchResult> Windows8_NewsListControlCollection
        {
            get
            {
                if(_windows8_NewsListControlCollection == null)
					RefreshWindows8_NewsListControlCollectionDelegate();
				return _windows8_NewsListControlCollection;     
            }
            set
            {
                SetProperty(ref _windows8_NewsListControlCollection, value);
            }
        }

		private RssSearchResult _selectedWindows8_NewsListControlCollection;

        /// <summary>
        /// SelectedWindows8_NewsListControlCollection property.
        /// </summary>		
        public RssSearchResult SelectedWindows8_NewsListControlCollection
        {
            get
            {
				return _selectedWindows8_NewsListControlCollection;
            }
            set
            {
                _selectedWindows8_NewsListControlCollection = value;
                if (value != null)
                    _navigationService.NavigateTo<IWindows8_DetailViewModel>(_selectedWindows8_NewsListControlCollection);
            }
        }

        /// <summary>
        /// Delegate method for the RefreshStudyAbroad_NewsListControlCollection command.
        /// </summary>
        public async void RefreshStudyAbroad_NewsListControlCollectionDelegate(int pageNumber= 1) 
        {
			try
			{
				LoadingStudyAbroad_NewsListControlCollection = true;
				StudyAbroad_NewsListControlCollection = await _studyAbroadDS.GetData();
			}
            catch (Exception ex)
            {
				StudyAbroad_NewsListControlCollection = null;
		
                Debug.WriteLine(ex.ToString());
                _dialogService.Show(AppResources.rssError + Environment.NewLine + AppResources.TryAgain);
            }
            finally
            {
				LoadingStudyAbroad_NewsListControlCollection = false;
			}
        }
		
		
        private bool _loadingStudyAbroad_NewsListControlCollection;
		
        public bool LoadingStudyAbroad_NewsListControlCollection
        {
            get { return _loadingStudyAbroad_NewsListControlCollection; }
            set { SetProperty(ref _loadingStudyAbroad_NewsListControlCollection, value); }
        }

        private ICommand _refreshStudyAbroad_NewsListControlCollection;

        /// <summary>
        /// Gets the RefreshStudyAbroad_NewsListControlCollection command.
        /// </summary>
        public ICommand RefreshStudyAbroad_NewsListControlCollection
        {
            get { return _refreshStudyAbroad_NewsListControlCollection = _refreshStudyAbroad_NewsListControlCollection ?? new DelegateCommand<int>(RefreshStudyAbroad_NewsListControlCollectionDelegate); }
        }

        /// <summary>
        /// Delegate method for the RefreshNews_NewsListControlCollection command.
        /// </summary>
        public async void RefreshNews_NewsListControlCollectionDelegate(int pageNumber= 1) 
        {
			try
			{
				LoadingNews_NewsListControlCollection = true;
				News_NewsListControlCollection = await _newsDS.GetData();
			}
            catch (Exception ex)
            {
				News_NewsListControlCollection = null;
		
                Debug.WriteLine(ex.ToString());
                _dialogService.Show(AppResources.rssError + Environment.NewLine + AppResources.TryAgain);
            }
            finally
            {
				LoadingNews_NewsListControlCollection = false;
			}
        }
		
		
        private bool _loadingNews_NewsListControlCollection;
		
        public bool LoadingNews_NewsListControlCollection
        {
            get { return _loadingNews_NewsListControlCollection; }
            set { SetProperty(ref _loadingNews_NewsListControlCollection, value); }
        }

        private ICommand _refreshNews_NewsListControlCollection;

        /// <summary>
        /// Gets the RefreshNews_NewsListControlCollection command.
        /// </summary>
        public ICommand RefreshNews_NewsListControlCollection
        {
            get { return _refreshNews_NewsListControlCollection = _refreshNews_NewsListControlCollection ?? new DelegateCommand<int>(RefreshNews_NewsListControlCollectionDelegate); }
        }

        /// <summary>
        /// Delegate method for the RefreshWindowsPhone_NewsListControlCollection command.
        /// </summary>
        public async void RefreshWindowsPhone_NewsListControlCollectionDelegate(int pageNumber= 1) 
        {
			try
			{
				LoadingWindowsPhone_NewsListControlCollection = true;
				WindowsPhone_NewsListControlCollection = await _windowsPhoneDS.GetData();
			}
            catch (Exception ex)
            {
				WindowsPhone_NewsListControlCollection = null;
		
                Debug.WriteLine(ex.ToString());
                _dialogService.Show(AppResources.rssError + Environment.NewLine + AppResources.TryAgain);
            }
            finally
            {
				LoadingWindowsPhone_NewsListControlCollection = false;
			}
        }
		
		
        private bool _loadingWindowsPhone_NewsListControlCollection;
		
        public bool LoadingWindowsPhone_NewsListControlCollection
        {
            get { return _loadingWindowsPhone_NewsListControlCollection; }
            set { SetProperty(ref _loadingWindowsPhone_NewsListControlCollection, value); }
        }

        private ICommand _refreshWindowsPhone_NewsListControlCollection;

        /// <summary>
        /// Gets the RefreshWindowsPhone_NewsListControlCollection command.
        /// </summary>
        public ICommand RefreshWindowsPhone_NewsListControlCollection
        {
            get { return _refreshWindowsPhone_NewsListControlCollection = _refreshWindowsPhone_NewsListControlCollection ?? new DelegateCommand<int>(RefreshWindowsPhone_NewsListControlCollectionDelegate); }
        }

        /// <summary>
        /// Delegate method for the RefreshWindows8_NewsListControlCollection command.
        /// </summary>
        public async void RefreshWindows8_NewsListControlCollectionDelegate(int pageNumber= 1) 
        {
			try
			{
				LoadingWindows8_NewsListControlCollection = true;
				Windows8_NewsListControlCollection = await _windows8DS.GetData();
			}
            catch (Exception ex)
            {
				Windows8_NewsListControlCollection = null;
		
                Debug.WriteLine(ex.ToString());
                _dialogService.Show(AppResources.rssError + Environment.NewLine + AppResources.TryAgain);
            }
            finally
            {
				LoadingWindows8_NewsListControlCollection = false;
			}
        }

        private ICommand _openWindowsStore;

        public ICommand OpenWindowsStore
        {
            get { return _openWindowsStore = _openWindowsStore ?? new DelegateCommand<string>(OpenWindowsStoreDelegate); }
        }

        public void OpenWindowsStoreDelegate(string param)
        {
            MarketplaceSearchTask marketplaceSearchTask = new MarketplaceSearchTask();

            marketplaceSearchTask.SearchTerms = "Benjamin Sautermeister";

            marketplaceSearchTask.Show();
        }
		
        private bool _loadingWindows8_NewsListControlCollection;
		
        public bool LoadingWindows8_NewsListControlCollection
        {
            get { return _loadingWindows8_NewsListControlCollection; }
            set { SetProperty(ref _loadingWindows8_NewsListControlCollection, value); }
        }

        private ICommand _refreshWindows8_NewsListControlCollection;

        /// <summary>
        /// Gets the RefreshWindows8_NewsListControlCollection command.
        /// </summary>
        public ICommand RefreshWindows8_NewsListControlCollection
        {
            get { return _refreshWindows8_NewsListControlCollection = _refreshWindows8_NewsListControlCollection ?? new DelegateCommand<int>(RefreshWindows8_NewsListControlCollectionDelegate); }
        }

        /// <summary>
        /// Delegate method for the SetLockScreenCommand command.
        /// </summary>
        public  void SetLockScreenCommandDelegate() 
        {
	
				_lockScreenService.SetLockScreen("DoWapp-Splashscreen-WXGA-black.png");
        }
		

        private ICommand _setLockScreenCommand;

        /// <summary>
        /// Gets the SetLockScreenCommand command.
        /// </summary>
        public ICommand SetLockScreenCommand
        {
            get { return _setLockScreenCommand = _setLockScreenCommand ?? new DelegateCommand(SetLockScreenCommandDelegate); }
        }
    }
}
